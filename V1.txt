#-*-coding: utf-8-*- 
# 한글 주석 이용
import binascii
import serial
from datetime import datetime
import re
import thread
import json
import RPi.GPIO as pi
import time

eof = "\xff\xff\xff"
port = serial.Serial('/dev/ttyS0', 9600, timeout=0.01)
Time = ""
path_ice = "/home/pi/Desktop/ice_config/config_ice.ini"
path_drink = "/home/pi/Desktop/ice_config/config_drink.ini"

#라즈베리파이 GPIO 핀 17개 중 16개 사용 (남은 핀: 13, 21)
R1=19 #우유통펌프
R2=26 #배합기
R3=17 #파우더
R8=4 #워터펌프
R6=23 #컴프레셔
R7=24 #응축기
AC_R1=16 #AC모터 정회전
AC_R2=20 #AC모터 역회전
R5=27 #음료 모터
#SW=21 #음료 스위치 

DAT =5 #DOUT
CLK=12
DAT2=6 #DOUT2
CLK2=22
water_level=6 # 배합통 수위 센서
ice_level = 25 #얼음통 적외선 센서

num=0
num2=0
wei_avg=0 # 우유통 무게(%)

global status_pic
#vla = {"x01xc1" : 10 , "x01xc1" : 20}
#test = port.readline
#vla[test]

pi.setmode(pi.BCM)
pi.setwarnings (False)
pi.setup(R1,pi.OUT)
pi.setup(R2,pi.OUT)
pi.setup(R3,pi.OUT)
pi.setup(R5,pi.OUT)
pi.setup(R6,pi.OUT)
pi.setup(R7,pi.OUT)
pi.setup(R8,pi.OUT)
pi.setup(AC_R1,pi.OUT) 
pi.setup(AC_R2,pi.OUT)

#pi.setup(SW,pi.IN)
pi.setup(ice_level,pi.IN)
pi.setup(water_level,pi.IN)
pi.setup(CLK,pi.OUT)
pi.setup(CLK2,pi.OUT)

def weight(): #우유통의 무게를 측정해서 %로 출력
    global wei_avg
    i=0
    j=0
    num=0
    num2=0
    
    pi.setup(DAT, pi.OUT)
    pi.setup(DAT2, pi.OUT)
    pi.output(DAT,1)
    pi.output(DAT2,1)
    pi.output(CLK,0)
    pi.output(CLK2,0) 
    pi.setup(DAT, pi.IN)
    pi.setup(DAT2, pi.IN)
    
    while pi.input(DAT) == 1:
        i=0
        
    while pi.input(DAT2) == 1:
        j=0
        
    for i in range(24):
        pi.output(CLK,1)
        num=num<<1
        pi.output(CLK,0)
        
        if pi.input(DAT)== 0:
            num=num+1
            
    for j in range(24):
        pi.output(CLK2,1)
        num2=num2<<1
        pi.output(CLK2,0)
        
        if pi.input(DAT2)== 0:
            num2=num2+1
            
    pi.output(CLK,1)
    pi.output(CLK2,1)
    
    num=num^0x800000
    num2=num2^0x800000
    
    pi.output(CLK,0)
    pi.output(CLK2,0)
    
    wei=0
    wei2=0
    wei=((num)/(1406))
    wei2=((num2)/(1406))
    wei_avg=(5900-((wei+wei2)/2))/3.3 # wei_avg -> 우유통에 들어있는 유유의 양 (%)
    
    if(wei_avg>=95):
      wei_avg=100
    elif(wei_avg<=5):
      wei_avg=0

    print"wei_avg:",(int)(wei_avg),"%"
    
def preheating(x): #냉각기 예열 
    pi.output(R6, 1) #컴프레셔 작동
    port.write("Home.status_image.pic=125" + eof) #냉각기 예열 중 125
    time.sleep(600)
    pi.output(R6, 0)
    port.write("Home.status_image.pic=126" + eof) #냉각기 예열 완료 126
    time.sleep(2)
    port.write("Home.status_image.pic=127" + eof) #작동 준비 완료 127

def stop(): #청소모드
    time.sleep(0.5)
    port.write("Home.status_image.pic=138" + eof) #모드창에 청소모드 출력
    time.sleep(0.5)
    port.write("Home.mode_image.pic=143" + eof) #상태창에 청소모드 출력

    pi.output(R1, 0)
    pi.output(R2, 0)
    pi.output(R3, 0)
    pi.output(R5, 0)
    pi.output(R6, 0)
    pi.output(R7, 0)
    pi.output(R8, 0)
    pi.output(AC_R1, 0)
    pi.output(AC_R2, 0)
    

def v1_drink_sequence(): #음료 시퀀스 동작 함수
    print "drink_sequence TEST 1"
    if (pi.input(water_level)): #배합통에 음료가 지정된 수위보다 낮으면 조건문 실행
        print "drink_sequence TEST 2"
        while (pi.input(water_level)): # 배합통에 음료가 없다면 ( 지정된 수위보다 낮다면 ) while문에서 빠져나가지 못하고 음료를 만드는 작업을 수행 
            print "drink_sequence TEST 3"
            time.sleep(1)
            port.write("Home.status_image.pic=128" + eof) #음료 배합 중 128
            pi.output(R2, 1)
            time.sleep(2)
            pi.output(R1, 1)
            time.sleep(2)
            pi.output(R3, 1)
            time.sleep(2)
            pi.output(R1, 0)
            pi.output(R3, 0)  #여기까지 커피 만들기
            time.sleep(6)
            #음료를 만들어서 지정된 수위를 넘어서면 while문에서 탈출
    print "drink_sequence TEST 5"        
    if (pi.input(water_level))==0: #배합통에 음료가 지정된 수위보다 높다면 조건문 실행
        print "drink_sequence TEST 6"
        time.sleep(0.5)
        port.write("Home.mode_image.pic=147" + eof) #모드창에 음료모드를 출력
        time.sleep(0.5)
        pi.output(R5,1) #음료모터 동작
        time.sleep(2.5) #2.5초 동작
        pi.output(R5,0) #음료모터 정지
         
    print "drink_sequence TEST 7"

'''
def general_sequence():
    
    
'''

def v1_ice_sequence(x): #얼음 시퀀스 동작 함수
    while (pi.input(ice_level))==0: # 적외선 센서에 얼음이 감지되면 동작이 정지 아니라면 무한반복 (나중에 추가) 
    
        while (pi.input(water_level)): # 배합통에 음료가 없다면 ( 지정된 수위보다 낮다면 ) while문에서 빠져나가지 못하고 음료를 만드는 작업을 수행 

            time.sleep(1)
            port.write("Home.status_image.pic=128" + eof) #음료 배합 중 128
            pi.output(R2, 1)
            time.sleep(2)
            pi.output(R1, 1)
            time.sleep(2)
            pi.output(R3, 1)
            time.sleep(2)
            pi.output(R1, 0)
            pi.output(R3, 0)  #여기까지 커피 만들기
            time.sleep(6)
            pi.output(R2, 0) 
        #음료를 만들어서 지정된 수위를 넘어서면 while문에서 탈출
        
        time.sleep(0.5)
        port.write("Home.mode_image.pic=140" + eof) #모드창에 얼음모드를 출력
        time.sleep(0.5)
        port.write("Home.status_image.pic=128" + eof) #음료 배합 중 128
        time.sleep(0.1)
        pi.output(R2, 1) # 배합기모터 먼저 작동
        time.sleep(2) #2초가 지난 후에 다음 코딩으로 넘어감
        pi.output(R1, 1) # 우유모터가 동작
        time.sleep(2)
        pi.output(R3, 1) # 파우더모터가 동작
        time.sleep(2)
        pi.output(R1, 0) # 우유모터 정지
        pi.output(R3, 0) # 파우더모터 정지
        time.sleep(6) 
        pi.output(R2, 0) # 배합기모터가 정지
        port.write("Home.status_image.pic=129" + eof) #음료 배합 완료 129
        time.sleep(2)                             

        pi.output(R8, 1) #워터펌프 동작
        port.write("Home.status_image.pic=130" + eof) #음료 냉각 준비 중 130
        time.sleep(50) #50초간 동작
        pi.output(R8, 0) #워터펌프 정지

        port.write("Home.status_image.pic=131" + eof) #음료 냉각 준비 완료 131
        time.sleep(2) 
        pi.output(R6, 1) #컴프레셔 작동
        port.write("Home.status_image.pic=132" + eof) #냉각모드 작동 132
        time.sleep(2)
        port.write("Home.status_image.pic=137" + eof) #얼음 생성 중 137
        time.sleep(538) #9m
        port.write("Home.status_image.pic=133" + eof) #얼음 생성 완료 133
        time.sleep(2)

        for i in range(40): #AC모터 아래 동작 40번 반복 후 정지
            pi.output(AC_R1, 1) # 정회전 동작
            time.sleep(0.03) # 0.03초 동작
            pi.output(AC_R1, 0) # 정회전 정지
            time.sleep(0.1) # 0.1초 정지 

        time.sleep(1)

        pi.output(R7, 1) #응축기 동작 (얼음 분리)
        port.write("Home.status_image.pic=134" + eof) #얼음 분리 중 134
        time.sleep(10)
        port.write("Home.status_image.pic=135" + eof) #얼음 분리 완료 135
        pi.output(R7, 0) #응축기 정지
        pi.output(R6, 0) #컴프레셔 정지  

        time.sleep(9)
        port.write("Home.status_image.pic=136" + eof) #냉각기 작동 종료 136

        time.sleep(1)

        for i in range(40): #AC모터 아래 동작 40번 반복 후 정지
            pi.output(AC_R2, 1) # 역회전 동작
            time.sleep(0.03) #0.03초 동작
            pi.output(AC_R2, 0) # 역회전 정지
            time.sleep(0.1) #0.1초
            
        time.sleep(2)

        port.write("Home.status_image.pic=127" + eof) #작동 준비 완료 127

def show_time(page):

    global Time

    while True:

        Time = getTime()

        print Time
        weight()

        time.sleep(20)

def getTime():

    x = datetime.now()

    hour = x.strftime("%I")

    min = x.strftime("%M")

    ampm = x.strftime("%P")

    Time = (hour + ":" + min + " " + ampm)

    return Time

def cleaning_work():

    port.flush()

    while True:

        stop()
        port.flush()

        port.write("Cleaning.time.txt=\"" + Time +"\"" + eof)

        cleaning_resp = port.readline()
        print cleaning_resp
        if cleaning_resp == "cleaning_back\r\n":

            print "cleaning_back"

            port.flush()

            return

        elif cleaning_resp == "move_home\r\n":

            print "move_home"

            port.flush()

            return "home"

def Select_drink():

    port.flush()

    print "Select_drink"

    while True:

        port.write("Select_drink.time.txt=\"" + Time +"\"" + eof)

        Select_drink_resp = port.readline()

        if Select_drink_resp == "select_drink_back\r\n":

            print "select_drink_back"

            port.flush()

            return

        elif Select_drink_resp == "move_home\r\n":

            print "move_home"

            port.flush()

            return "home"

        elif Select_drink_resp == "powder1\r\n":

            print Select_drink_resp

            result = Config_drink(Select_drink_resp)

            if result == "home":

                port.flush()

                return "home"

            elif result == "confirm":

                port.flush()

                return "confirm"

        elif Select_drink_resp == "powder2\r\n":

            print Select_drink_resp

            result = Config_drink(Select_drink_resp)

            port.flush()

            if result == "home":

                port.flush()

                return "home"

            elif result == "confirm":

                port.flush()

                return "confirm"
            
def Select_general():
    port.flush()

    print "Select_general"

    while True:
        port.write("Select_general.time.txt=\"" + Time +"\"" + eof)

        Select_general_resp = port.readline()
        port.write("Select_general.drink_per.txt=\"" + str(wei_avg) +"%\"" + eof)
        
        port.write("Select_general.status_image.pic=142" + eof) #상태창에 청소모드 출력
        #port.write("Home.mode_image.pic=143" + eof) #상태창에 청소모드 출력
        
        if Select_general_resp == "select_back\r\n":

            print "select_general_back"

            port.flush()

            return
        elif Select_general_resp == "confirm\r\n":
            port.flush()
            print "select_confirm"
            return "confirm"
    
def Select_ice():

    port.flush()

    print "Select_ice"

    while True:

        port.write("Select_ice.time.txt=\"" + Time +"\"" + eof)

        Select_ice_resp = port.readline()

        if Select_ice_resp == "select_ice_back\r\n":

            print "select_ice_back"

            port.flush()

            return

        elif Select_ice_resp == "move_home\r\n":

            print "move_home"

            port.flush()

            return "home"

        elif Select_ice_resp == "powder1\r\n":

            result = Config_ice(Select_ice_resp)

            if result == "home":

                port.flush()

                return "home"

            elif result == "confirm":

                port.flush()

                return "confirm"

        elif Select_ice_resp == "powder2\r\n":

            result = Config_ice(Select_ice_resp)

            if result == "home":

                port.flush()

                return "home"

            elif result == "confirm":

                port.flush()

                return "confirm"

def save_config(data, path):

    print path

    f = open(path, "w")

    json.dump(data, f)

    f.close()

    try:

        f = open(path, "w")

        json.dump(data, f)

        f.close()

    except:

        print "save error"

        return 0

def get_config():

    config = {"powder" : 20, "water" : 30}

    try:

        f = open(path, "r")

        config = json.load(f)

        f.close()

    except:

        print "get config error"

        return config

    return config

def Config_drink(powder_name):

    port.flush()

    config = {"powder" : 0, "water" : 0}

    print "Config_drink"

    config = get_config()

    print config

    port.flush()

    while True:

        port.write("Config_drink.powder_name.txt=\"" + powder_name +"\"" + eof)

        port.write("Config_drink.powder_ratio.val=" + str(config["powder"]) + eof)

        port.write("Config_drink.water_ratio.val=" + str(config["water"]) + eof)

        port.write("Config_drink.time.txt=\"" + Time +"\"" + eof)

        Config_drink_resp = port.readlines()

        if len(Config_drink_resp) > 1:

            if Config_drink_resp[0] == "confirm\r\n":

                print "confirm"

                config["powder"] = 30 #get ratio value

                config["water"] = 20
                #save_config(path, config)
                port.flush()

                return "confirm"

            elif Config_drink_resp[0] == "cnf_save\r\n":

                print "cnf_save"

                print binascii.hexlify(re.sub("\r\n", "", Config_drink_resp[1]))

                print binascii.hexlify(Config_drink_resp[2])

                config["powder"] = 20   #get ratio value

                config["water"] = 30

                '''
                if save_config(config, path_drink) != 0:
                    port.write("Config_drink.save_msg.txt=\"File save completed\"" + eof)
                '''

                port.flush()

        elif len(Config_drink_resp) == 1:

            if Config_drink_resp[0] == "config_drink_back\r\n":

                print "config_drink_back"

                port.flush()

                return

            elif Config_drink_resp[0] == "move_home\r\n":

                print "move_home"

                port.flush()

                return "home"

            port.flush()

def Config_ice(powder_name):

    port.flush()


    config = {"powder" : 0, "water" : 0}

    print "Config_ice"

    config = get_config()

    print config

    port.flush()

    while True:

        port.write("Config_ice.powder_name.txt=\"" + powder_name +"\"" + eof)

        port.write("Config_ice.powder_ratio.val=" + str(config["powder"]) + eof)

        port.write("Config_ice.water_ratio.val=" + str(config["water"]) + eof)

        port.write("Config_ice.time.txt=\"" + Time +"\"" + eof)

        Config_ice_resp = port.readlines()

        if len(Config_ice_resp) > 1:

            if Config_ice_resp[0] == "confirm\r\n":

                print "confirm"

                config["powder"] = 30  #get ratio value

                config["water"] = 20

                #save_config(path_ice, config)

                port.flush()

                return "confirm"

            elif Config_ice_resp[0] == "cnf_save\r\n":

                print "cnf_save"

                print binascii.hexlify(re.sub("\r\n", "", Config_ice_resp[1]))

                print binascii.hexlify(Config_ice_resp[2])

                config["powder"] = 20  #get ratio value

                config["water"] = 30

                '''
                if save_config(config, path) != 0:

                    port.write("Config_ice.save_msg.txt=\"File save completed\"" + eof)

                '''

                port.flush()

        elif len(Config_ice_resp) == 1:

            if Config_ice_resp[0] == "config_ice_back\r\n":

                print "config_ice_back"

                port.flush()

                return

            elif Config_ice_resp[0] == "move_home\r\n":

                print "move_home"

                port.flush()

                return "home"

def drink_sequence():

    pass

def ice_sequence():

    pass

thread.start_new_thread(show_time,("Home",))

thread.start_new_thread(preheating,(1,)) #thread?  
 
select_mode = 1


#with port as ser:

#print "start"

while True:

    port.flush()

    #print ser.read()

    #respuesta = binascii.hexlify(ser.readlines())

    port.write("Home.time.txt=\"" + Time +"\"" + eof)

    '''
    port.write("Cleaning.time.txt=\"" + getTime() +"\"" + eof)

    '''

    respuesta = port.readline()

    #print respuesta

    if respuesta == "select_mode\r\n":

        print "select_mode"

        select_mode = 1

        port.flush()

        while select_mode:

            port.write("Select_mode.time.txt=\"" + Time +"\"" + eof)

            select_mode_resp = port.readline()

            if select_mode_resp == "select_back\r\n":

                print "select_back"

                port.flush()

                break

            elif select_mode_resp == "cleaning_btn\r\n":

                print "cleaning_btn"

                port.flush()

                if cleaning_work() == "home":

                    select_mode = 0

            elif select_mode_resp == "drink_btn\r\n":

                print "drink_btn"

                port.flush()

                result = Select_drink()

                if result == "home":

                    select_mode = 0

                elif result == "confirm":

                    select_mode = 0

                    thread.start_new_thread(v1_drink_sequence,("Home",)) #thread?

                #drink work

            elif select_mode_resp =="ice_btn\r\n":

                print "ice_btn"

                port.flush()

                result = Select_ice()

                if result == "home":

                    select_mode = 0

                elif result == "confirm":

                    select_mode = 0

                    port.write("Home.current_mod.txt=\"얼음모드\"" + eof)

                    thread.start_new_thread(v1_ice_sequence,("Home",)) #thread?
            elif select_mode_resp =="general_btn\r\n":

                print "general_btn"

                port.flush()

                result = Select_general()

                if result == "confirm":
                    select_mode = 0


            elif select_mode_resp == "move_home\r\n":

                print "move_home"

                port.flush()

                break

        #port.write("page0.test1.txt=\"test1\"" + eof)

py


